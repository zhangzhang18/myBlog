<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Meng</title>
  
  
  <link href="/myBlog/atom.xml" rel="self"/>
  
  <link href="https://zhangzhang18.github.io/myBlog/"/>
  <updated>2018-07-16T03:24:53.542Z</updated>
  <id>https://zhangzhang18.github.io/myBlog/</id>
  
  <author>
    <name>meng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM内存分配</title>
    <link href="https://zhangzhang18.github.io/myBlog/2017/07/20/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/"/>
    <id>https://zhangzhang18.github.io/myBlog/2017/07/20/垃圾收集算法/</id>
    <published>2017-07-20T15:46:25.000Z</published>
    <updated>2018-07-16T03:24:53.542Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-标记-清除算法"><a href="#1-标记-清除算法" class="headerlink" title="1.标记-清除算法"></a>1.标记-清除算法</h2><p>最基础的收集算法。<br>分为两个阶段：标记出所有需要回收的对象，标记完成后统一回收所有被标记的对象。<br>不足：效率，空间，标记清除后会产生大量不连续的内存碎片。</p><h2 id="2-复制算法"><a href="#2-复制算法" class="headerlink" title="2.复制算法"></a>2.复制算法</h2><p>解决效率问题。<br>将可用的内存按容量分为大小相等的两块，每次只使用一块。当一块用完了，将还存活的对象复制到另一块，然后再把已使用过的内存空间一次清理掉。</p><h2 id="3-标记整理算法"><a href="#3-标记整理算法" class="headerlink" title="3.标记整理算法"></a>3.标记整理算法</h2><p>复制算法有较多复制操作，效率问题。<br>根据老年代的特点，标记过程与标记-清除算法一样，后续操作让所有存活对象都像一端移动，然后直接清理掉边界以外的内存。</p><h2 id="4-分代收集算法"><a href="#4-分代收集算法" class="headerlink" title="4.分代收集算法"></a>4.分代收集算法</h2><p>在新生代中有大批对象死去，少量存活：复制算法。复制成本少。<br>老年代中对象存活率高，没有额外的空间对他进行担保：就必须使用 标记-清理 或 标记-整理 算法回收。</p><hr><p>一共有两种算法，一种是引用计数算法，每被引用一次计数器就+1，当引用为0就回收，不过这种算法有一个弊端就是，当对象之间互相引用的时候就永远不会回收，<br>所以用的最多的还是GC ROOTS可达性分析，看对象是否被GC ROOTS引用，那么哪些可以作为GC ROOTS呢？<br>有以下四种：1.栈里面的局部变量表，方法区的2.类静态属性引用的对象3.方法区中常量引用的对象，4.JNI本地变量栈中引用的对象<br><a href="http://www.importnew.com/13493.html" target="_blank" rel="noopener">http://www.importnew.com/13493.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-标记-清除算法&quot;&gt;&lt;a href=&quot;#1-标记-清除算法&quot; class=&quot;headerlink&quot; title=&quot;1.标记-清除算法&quot;&gt;&lt;/a&gt;1.标记-清除算法&lt;/h2&gt;&lt;p&gt;最基础的收集算法。&lt;br&gt;分为两个阶段：标记出所有需要回收的对象，标记完成后统一回收
      
    
    </summary>
    
      <category term="NoteBook" scheme="https://zhangzhang18.github.io/myBlog/categories/NoteBook/"/>
    
    
      <category term="JAVA" scheme="https://zhangzhang18.github.io/myBlog/tags/JAVA/"/>
    
      <category term="JVM" scheme="https://zhangzhang18.github.io/myBlog/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM内存分配</title>
    <link href="https://zhangzhang18.github.io/myBlog/2017/07/13/JVM%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
    <id>https://zhangzhang18.github.io/myBlog/2017/07/13/JVM内存分配/</id>
    <published>2017-07-13T12:46:25.000Z</published>
    <updated>2018-07-17T05:27:51.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-程序计数器（PCR）"><a href="#1-程序计数器（PCR）" class="headerlink" title="1.程序计数器（PCR）"></a>1.程序计数器（PCR）</h2><p>可以看做当前线程所执行的字节码的行号指示器。<br>为了线程切换后能够恢复到正确执行位置，每条线程都需要独立的程序计数器。</p><h2 id="2-栈（JVM-stack）"><a href="#2-栈（JVM-stack）" class="headerlink" title="2.栈（JVM stack）"></a>2.栈（JVM stack）</h2><p>线程私有，生命周期与线程相同。<br>描述的事Java方法执行的内存模型：每个方法执行的同时都会创建一个栈帧用于存储局部变量表，操作数栈，动态链接方法出口。<br>每个方法执行到完成，对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p><h2 id="3-本地方法栈（Native-Method-Stack）"><a href="#3-本地方法栈（Native-Method-Stack）" class="headerlink" title="3.本地方法栈（Native Method Stack）"></a>3.本地方法栈（Native Method Stack）</h2><p>与JVM栈相似，本地方法栈是用的是虚拟机的native方法</p><h2 id="4-堆（heap"><a href="#4-堆（heap" class="headerlink" title="4.堆（heap)"></a>4.堆（heap)</h2><p>是Java虚拟机管理内存中最大的一块。<br>是被所有线程共享的一块内存区域，次内存区域唯一目的是存放对象实例，几乎所有的对象及数组都要在这里分配内存。<br>是垃圾回收器管理的主要区域，因此很多时候也被称作“GC堆”。<br>现在收集器采用分代收集算法，所以Java堆还可以细分为：新生代，老年代；</p><h2 id="5-方法区（Method）"><a href="#5-方法区（Method）" class="headerlink" title="5.方法区（Method）"></a>5.方法区（Method）</h2><p>域Java堆一样。是各个线程共享的内存区域，<br>用于存储虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据。</p><h2 id="6-运行时常量池（Runtime-Constant-Pool）"><a href="#6-运行时常量池（Runtime-Constant-Pool）" class="headerlink" title="6.运行时常量池（Runtime Constant Pool）"></a>6.运行时常量池（Runtime Constant Pool）</h2><p>是方法区的一部分。<br>Class文件不仅有类的版本，字段，方法，接口描述信息外，还有一项信息是常量池，<br>用于存放编译期生成的各种字面量和符号引用。</p><h2 id="7-直接内存（Direct-Memory）"><a href="#7-直接内存（Direct-Memory）" class="headerlink" title="7.直接内存（Direct Memory）"></a>7.直接内存（Direct Memory）</h2><p>不是虚拟机运行数据区的一部分。<br>NIO（New Input/Output）类，引入一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，可以使用Native函数库直接分配堆外内存。通过一个Java堆DirectByteBuffer对象作为这块内存的引用进行操作。<br>显著提高性能，因为避免了Java堆和Native堆来回复制数据。</p><hr><p>栈区：每次方法的执行都会有一次栈帧的生成，并且其中有局部变量表。<br>堆区：每次new出来的对象都保存在这儿。<br>本地方法栈：通过C/C++调用系统接口的一些方法。<br>方法区：类的信息 静态变量都在这儿，还有程序计数器</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-程序计数器（PCR）&quot;&gt;&lt;a href=&quot;#1-程序计数器（PCR）&quot; class=&quot;headerlink&quot; title=&quot;1.程序计数器（PCR）&quot;&gt;&lt;/a&gt;1.程序计数器（PCR）&lt;/h2&gt;&lt;p&gt;可以看做当前线程所执行的字节码的行号指示器。&lt;br&gt;为了线程
      
    
    </summary>
    
      <category term="NoteBook" scheme="https://zhangzhang18.github.io/myBlog/categories/NoteBook/"/>
    
    
      <category term="JAVA" scheme="https://zhangzhang18.github.io/myBlog/tags/JAVA/"/>
    
      <category term="JVM" scheme="https://zhangzhang18.github.io/myBlog/tags/JVM/"/>
    
  </entry>
  
</feed>
